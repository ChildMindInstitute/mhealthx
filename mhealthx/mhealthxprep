#!/usr/bin/env python
"""
This pipeline runs feature extraction on mHealth data stored on Synapse.org.

Example: mhealthxprep --phonation syn4590865 -d /software

Example: mhealthxprep --phonation syn4590865 \
                      --balance syn4590866 \
                      --tapping syn4590864 \
                      -d /software -s 3

- First-time use on a given machine: include -u and -p for Synapse login.
- Replace -d argument with path to installed feature extraction software.

For help in using mhealthx ::

    - README file
    - Help on the command line::

        $ mhealthx --help

This file uses Nipype (http://www.nipy.org/nipype/) to create a workflow
environment that enables mhealthx to run in a flexible, modular manner
while storing provenance information.

Authors:
    - Arno Klein, 2015  (arno@sagebase.org)  http://binarybottle.com

Copyright 2015,  Sage Bionetworks (http://sagebase.org), Apache v2.0 License

"""

import os
import argparse
from nipype import config, logging
from nipype.interfaces.utility import Function as Fn
from nipype.pipeline.engine import Workflow, Node
from mhealthx.xio import extract_synapse_rows

# ============================================================================
#
# Command-line arguments
#
# ============================================================================
parser = argparse.ArgumentParser(description="""
                    Prepare to extract features from mHealth data by
                    downloading data stored on Sage Bionetwork's Synapse.org.
                    Example: mhealthx --phonation syn4590865 -d /software
                    (-d: path to installed software dependencies; -u, -p:
                    Synapse login for first use on a given machine)
""",
                                 formatter_class = lambda prog:
                                 argparse.HelpFormatter(prog,
                                                        max_help_position=40))
parser.add_argument("-v", "--version", help="version number",
                    action='version', version='%(prog)s 0.1')
parser.add_argument("-n", "--numproc",
                    help='number of processors (default: 1)',
                    type=int, default=1, metavar='INT')
parser.add_argument("-s", "--stop",
                    help='stop at this many rows of the Synapse tables',
                    type=int, metavar='INT')
parser.add_argument("-g", "--graph",
                    help='plot workflow graph: "hier", "flat", "exec"',
                    choices=['hier', 'flat', 'exec'], metavar='STR')
parser.add_argument("--plugin", dest="plugin",
                    default='Linear',
                    help="optional plugin: --plugin PBS")
parser.add_argument("--plugin_args", dest="plugin_args",
                    help="optional plugin arguments:"
                         " --plugin_args \"dict(qsub_args='-q many')\"")
setup_group = parser.add_argument_group('setup')
setup_group.add_argument("-d", "--dependencies",
                         help="path to software dependencies",
                         metavar='STR')
setup_group.add_argument("-u", "--username",
                         help="Synapse username", metavar='STR')
setup_group.add_argument("-p", "--password",
                         help="Synapse password", metavar='STR')
activities_group = parser.add_argument_group('activities')
activities_group.add_argument("--phonation",
                              help="Synapse table ID for phonation data",
                              metavar='STR')
activities_group.add_argument("--balance",
                              help="Synapse table ID for balance data",
                              metavar='STR')
activities_group.add_argument("--tapping",
                              help="Synapse table ID for tapping data",
                              metavar='STR')
outputs_group = parser.add_argument_group('outputs')
outputs_group.add_argument("-c", "--cache",
                           help="cache folder (if not $HOME/mhealthx_cache)",
                           default=os.path.join(os.environ['HOME'],
                                                'mhealthx_cache'),
                           metavar='STR')
args = parser.parse_args()
username = args.username
password = args.password
dependencies = args.dependencies
synID_phonation = args.phonation
synID_balance = args.balance
synID_tapping = args.tapping
if args.numproc:
    nproc = args.numproc
else:
    nproc = 1

# ============================================================================
#
# Login once to Synapse and cache credentials
#
# ============================================================================
import synapseclient
syn = synapseclient.Synapse()
syn.login(username, password, rememberMe=True)

# ============================================================================
#
# Initialize main workflow and create output directories
#
# ============================================================================
main_workflow_name = 'mhealthxprep'
Flow = Workflow(name=main_workflow_name)
Flow.base_dir = args.cache
if not os.path.isdir(args.cache):
    print("Create missing cache directory: {0}".format(args.cache))
    os.makedirs(args.cache)
row_path = os.path.join(args.cache, main_workflow_name)

# ============================================================================
#
# Phonation workflow
#
# ============================================================================
if synID_phonation:

    row_path_phonation = os.path.join(row_path, 'row_files_phonation')
    if not os.path.isdir(row_path_phonation):
        os.makedirs(row_path_phonation)

    # ------------------------------------------------------------------------
    # Retrieve information about all phonation files in Synapse table:
    # ------------------------------------------------------------------------
    GetPhonationRows = Node(name='retrieve_phonation_rows',
                            interface=Fn(function=extract_synapse_rows,
                                         input_names=['synapse_table',
                                                      'save_path',
                                                      'limit',
                                                      'username',
                                                      'password'],
                                         output_names=['row_data',
                                                       'row_files']))
    Flow.add_nodes([GetPhonationRows])
    GetPhonationRows.inputs.synapse_table = synID_phonation
    GetPhonationRows.inputs.save_path = row_path_phonation
    if args.stop:
        GetPhonationRows.inputs.limit = args.stop
    else:
        GetPhonationRows.inputs.limit = None
    GetPhonationRows.inputs.username = ''
    GetPhonationRows.inputs.password = ''

if synID_balance:

    row_path_balance = os.path.join(row_path, 'row_files_balance')
    if not os.path.isdir(row_path_balance):
        os.makedirs(row_path_balance)

    # ------------------------------------------------------------------------
    # Retrieve information about all balance files in Synapse table:
    # ------------------------------------------------------------------------
    GetBalanceRows = GetPhonationRows.clone('retrieve_balance_rows')
    GetBalanceRows.inputs.synapse_table = synID_balance
    GetBalanceRows.inputs.save_path = row_path_balance
    Flow.add_nodes([GetBalanceRows])

if synID_tapping:

    row_path_tapping = os.path.join(row_path, 'row_files_tapping')
    if not os.path.isdir(row_path_tapping):
        os.makedirs(row_path_tapping)

    # ------------------------------------------------------------------------
    # Retrieve information about all tapping files in Synapse table:
    # ------------------------------------------------------------------------
    GetTappingRows = GetPhonationRows.clone('retrieve_tapping_rows')
    GetTappingRows.inputs.synapse_table = synID_tapping
    GetTappingRows.inputs.save_path = row_path_tapping
    Flow.add_nodes([GetTappingRows])

# ============================================================================
#
# Run workflows
#
# ============================================================================
if __name__ == '__main__':

    from time import time
    time0 = time()

    # ------------------------------------------------------------------------
    # Workflow configuration: provenance tracking, content hashing, etc.:
    # ------------------------------------------------------------------------
    # config.enable_provenance()
    Flow.config['execution']['hash_method'] = 'timestamp'
    Flow.config['execution']['local_hash_check'] = False

    # ------------------------------------------------------------------------
    # Generate a visual graph:
    # ------------------------------------------------------------------------
    graph_vis = args.graph
    if graph_vis:
        if graph_vis == 'exec':
            Flow.write_graph(graph2use=graph_vis, simple_form=False)
        else:
            if graph_vis == 'hier':
                graph_vis = 'hierarchical'
            Flow.write_graph(graph2use=graph_vis)

    # ------------------------------------------------------------------------
    # Debug: http://nipy.org/nipype/users/config_file.html#debug-configuration
    # ------------------------------------------------------------------------
    debug = False
    if debug:
        config.set('logging', 'workflow_level', 'DEBUG')
        logging.update_logging(config)
        Flow.config['execution']['stop_on_first_rerun'] = True
        nproc = 1

    # ------------------------------------------------------------------------
    # Run with or without a plugin:
    # Ex: workflow.run(plugin='SGEGraph',
    #                  plugin_args = {'dont_resubmit_completed_jobs': True})
    # ------------------------------------------------------------------------
    if args.plugin:
        if args.plugin_args:
            Flow.run(plugin=args.plugin, plugin_args=eval(args.plugin_args))
        else:
            Flow.run(plugin=args.plugin)
    elif nproc > 1:
        Flow.run(plugin='MultiProc',
                 plugin_args={'n_procs': nproc})
    else:
        Flow.run()  # Use all processors: Flow.run(plugin='MultiProc')

    print('Done! ({0:0.2f} seconds)'.format(time() - time0))

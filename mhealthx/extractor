#!/usr/bin/env python
"""
This pipeline runs feature extraction on mHealth data stored on Synapse.org.

Example: extractor --phonation syn4590865 -t /home/arno/software/audio

- First-time use on a given machine: include -u and -p for Synapse login.
- Replace -t argument with path to installed feature extraction software.

For help in using extractor ::

    - README file
    - Help on the command line::

        $ extractor --help

This file uses Nipype (http://www.nipy.org/nipype/) to create a workflow
environment that enables extractor to run in a flexible, modular manner
while storing provenance information.

Authors:
    - Arno Klein, 2015  (arno@sagebase.org)  http://binarybottle.com

Copyright 2015,  Sage Bionetworks (http://sagebase.org), Apache v2.0 License

"""

import os
import argparse
from nipype import config, logging
from nipype.interfaces.io import DataSink
from nipype.interfaces.utility import Function as Fn
from nipype.pipeline.engine import Workflow, Node, MapNode
from mhealthx.io_data import read_synapse_table_files
from mhealthx.features import opensmile, opensmile_features_to_synapse

# ============================================================================
#
# Command-line arguments
#
# ============================================================================
parser = argparse.ArgumentParser(description="""
                    Extract features from mHealth data
                    stored on Sage Bionetwork's Synapse.org.
                    Example: extractor --phonation syn4590865 -t /software
                    (-t: path to installed third-party software; -u, -p:
                    Synapse login for first use on a given machine)
""",
                    formatter_class = lambda prog:
                    argparse.HelpFormatter(prog, max_help_position=40))
parser.add_argument("-v", "--version", help="version number",
                    action='version', version='%(prog)s 0.1')
parser.add_argument("-n", "--numproc",
                    help=('number of processors (default: 1)'),
                    type=int, default=1, metavar='INT')
parser.add_argument("-g", "--graph",
                    help=('plot workflow graph: "hier", "flat", "exec"'),
                    choices=['hier', 'flat', 'exec'], metavar='STR')
parser.add_argument("--plugin", dest="plugin",
                    default='Linear',
                    help="optional plugin: --plugin PBS")
parser.add_argument("--plugin_args", dest="plugin_args",
                    help="optional plugin arguments:"
                         " --plugin_args \"dict(qsub_args='-q many')\"")
setup_group = parser.add_argument_group('setup')
setup_group.add_argument("-t", "--thirdparty",
                    help="path to third-party software",
                    metavar='STR')
setup_group.add_argument("-u", "--username",
                    help="Synapse username",
                    metavar='STR')
setup_group.add_argument("-p", "--password",
                    help="Synapse password",
                    metavar='STR')
activities_group = parser.add_argument_group('activities')
activities_group.add_argument("--phonation",
                    help="Synapse table ID for phonation data",
                    metavar='STR')
activities_group.add_argument("--balance",
                    help="Synapse table ID for balance data",
                    metavar='STR')
activities_group.add_argument("--tapping",
                    help="Synapse table ID for tapping data",
                    metavar='STR')
outputs_group = parser.add_argument_group('outputs')
outputs_group.add_argument("-o", "--output",
                    help='output folder (if not $HOME/mhealthx_output)',
                    default=os.path.join(os.environ['HOME'],
                                         'mhealthx_output'), metavar='STR')
outputs_group.add_argument("-c", "--cache",
                    help="cache folder"
                         " (if not $HOME/mhealthx_cache)",
                    default=os.path.join(os.environ['HOME'],
                                         'mhealthx_cache'), metavar='STR')
args = parser.parse_args()
username = args.username
password = args.password
thirdparty = args.thirdparty
synID_phonation = args.phonation
synID_balance = args.balance
synID_tapping = args.tapping
if args.numproc:
    nproc = args.numproc
else:
    nproc = 1

# ============================================================================
#
# Login once to Synapse and cache credentials
#
# ============================================================================
import synapseclient
syn = synapseclient.Synapse()
syn.login(username, password, rememberMe=True)

# ============================================================================
#
# Initialize main workflow and create output directories
#
# ============================================================================
main_workflow_name = 'mHealthX'
Flow = Workflow(name=main_workflow_name)
Flow.base_dir = args.cache
Sink = Node(DataSink(), name='Results')
Sink.inputs.base_directory = args.output
if not os.path.isdir(args.output):
    print("Create missing output directory: {0}".format(args.output))
    os.makedirs(args.output)
if not os.path.isdir(args.cache):
    print("Create missing cache directory: {0}".format(args.cache))
    os.makedirs(args.cache)
if synID_phonation:
    phonation_file_path = os.path.join(args.cache, main_workflow_name,
                                       'phonation_files')
    if not os.path.isdir(phonation_file_path):
        os.makedirs(phonation_file_path)

# ============================================================================
#
# Phonation workflow
#
# ============================================================================
if synID_phonation:
    phonFlow = Workflow(name='phonation')

    # ------------------------------------------------------------------------
    # Read Synapse table:
    # ------------------------------------------------------------------------
    # GetPhonationFiles = Node(name='retrieve_phonation_files',
    #                          interface=Fn(function=read_synapse_table_files,
    #                                       input_names=['synapse_table_id',
    #                                                    'column_names',
    #                                                    'download_limit',
    #                                                    'out_path',
    #                                                    'username',
    #                                                    'password'],
    #                                       output_names=['table_data',
    #                                                     'downloaded_files']))
    # Flow.add_nodes([GetPhonationFiles])
    # GetPhonationFiles.inputs.synapse_table_id = synID_phonation
    # GetPhonationFiles.inputs.column_names = ['audio_audio.m4a',
    #                                          'audio_countdown.m4a']
    # GetPhonationFiles.inputs.download_limit = 3  # None = all rows
    # GetPhonationFiles.inputs.out_path = phonation_file_path
    # GetPhonationFiles.inputs.username = ''
    # GetPhonationFiles.inputs.password = ''

    def dummy(in_files):
        return in_files

    GetPhonationFiles = Node(name='retrieve_phonation_files',
                             interface=Fn(function=dummy,
                                          input_names=['wav_files'],
                                          output_names=['downloaded_files']))
    Flow.add_nodes([GetPhonationFiles])
    GetPhonationFiles.inputs.wav_files = ['/home/arno/wav/test1.wav',
                                          '/home/arno/wav/test2.wav',
                                          '/home/arno/wav/test3.wav']

    #-------------------------------------------------------------------------
    # Run openSMILE feature extraction on voice data:
    #-------------------------------------------------------------------------
    RunOpenSMILE = MapNode(name='openSMILE',
                           iterfield=['in_file'],
                           interface=Fn(function=opensmile,
                                        input_names=['wav_file',
                                                     'config_file',
                                                     'out_append',
                                                     'command'],
                                        output_names=['feature_file']))
    Flow.add_nodes([RunOpenSMILE])
    Flow.connect(GetPhonationFiles, 'downloaded_files',
                 RunOpenSMILE, 'wav_file')

    RunOpenSMILE.inputs.config_file = os.path.join(thirdparty,
                                                   'openSMILE','config',
                                                   'IS13_ComParE.conf')
    RunOpenSMILE.inputs.out_append = '.csv'
    RunOpenSMILE.inputs.command = os.path.join(thirdparty,
                                               'openSMILE','SMILExtract')
    Flow.connect(RunOpenSMILE, 'feature_file',
                 Sink, 'phonation.@features.openSMILE')

    #-------------------------------------------------------------------------
    # Push openSMILE features to a Synapse table:
    #-------------------------------------------------------------------------
    # SaveOpenSMILE = Node(name='save_openSMILE_features',
    #                     interface=Fn(function=opensmile_features_to_synapse,
    #                                  input_names=['in_files',
    #                                               'synapse_project_id',
    #                                               'table_name'],
    #                                  output_names=['synapse_table_id']))
    # Flow.add_nodes([SaveOpenSMILE])
    # Flow.connect(RunOpenSMILE, 'feature_file', SaveOpenSMILE, 'in_files')
    # SaveOpenSMILE.inputs.synapse_project_id = 'syn4899451'
    # SaveOpenSMILE.inputs.table_name = 'Phonation openSMILE feature table'

    # #-------------------------------------------------------------------------
    # # Copy original Synapse table to an mPower phonation file table:
    # #-------------------------------------------------------------------------
    # MakePhonationFileTable = Node(name='make_phonation_file_table',
    #                         interface=Fn(function=copy_synapse_table,
    #                                      input_names=['synapse_table_id',
    #                                                   'synapse_project_id',
    #                                                   'table_name',
    #                                                   'table_data',
    #                                                   'remove_columns',
    #                                                   'username',
    #                                                   'password'],
    #                                      output_names=['table_data',
    #                                                    'table_name',
    #                                                    'synapse_project_id']))
    # Flow.add_nodes([MakePhonationFileTable])
    # MakePhonationFileTable.inputs.synapse_table_id = synID_phonation
    # MakePhonationFileTable.inputs.synapse_project_id = 'syn4899451'
    # MakePhonationFileTable.inputs.table_name = 'mPower phonation ' \
    #                                               'feature file table'
    # Flow.connect(GetPhonationFiles, 'table_data',
    #              MakePhonationFileTable, 'table_data')
    # MakePhonationFileTable.inputs.remove_columns = ['audio_audio.m4a',
    #                                                   'audio_countdown.m4a']
    # MakePhonationFileTable.inputs.username = ''
    # MakePhonationFileTable.inputs.password = ''
    #
    # #-------------------------------------------------------------------------
    # # Save openSMILE output file handles to the mPower phonation file table:
    # #-------------------------------------------------------------------------
    # StoreOpenSMILEfiles = Node(name='store_opensmile_files',
    #                    interface=Fn(function=upload_files_handles_to_synapse,
    #                                 input_names=['in_files',
    #                                              'synapse_project_id',
    #                                              'table_name',
    #                                              'username',
    #                                              'password'],
    #                                 output_names=[]))
    # Flow.add_nodes([StoreOpenSMILEfiles])
    # Flow.connect(RunOpenSMILE, 'out_files',
    #              StoreOpenSMILEfiles, 'in_files')
    # Flow.connect(MakePhonationFileTable, 'synapse_project_id',
    #              StoreOpenSMILEfiles, 'synapse_project_id')
    # Flow.connect(MakePhonationFileTable, 'table_name',
    #              StoreOpenSMILEfiles, 'table_name')
    # StoreOpenSMILEfiles.inputs.username = ''
    # StoreOpenSMILEfiles.inputs.password = ''


# ============================================================================
#
# Run workflows
#
# ============================================================================
if __name__ == '__main__':

    from time import time
    time0 = time()

    # ------------------------------------------------------------------------
    # Workflow configuration: provenance tracking, content hashing, etc.:
    # ------------------------------------------------------------------------
    # config.enable_provenance()
    Flow.config['execution']['hash_method'] = 'content'
    # Flow.config['execution']['use_relative_paths'] = True

    # ------------------------------------------------------------------------
    # Generate a visual graph:
    # ------------------------------------------------------------------------
    graph_vis = args.graph
    if graph_vis:
        if graph_vis == 'exec':
            Flow.write_graph(graph2use=graph_vis, simple_form=False)
        else:
            if graph_vis == 'hier':
                graph_vis = 'hierarchical'
            Flow.write_graph(graph2use=graph_vis)

    # ------------------------------------------------------------------------
    # Debug: http://nipy.org/nipype/users/config_file.html#debug-configuration
    # ------------------------------------------------------------------------
    debug = False
    if debug:
        config.set('logging', 'workflow_level', 'DEBUG')
        logging.update_logging(config)
        Flow.config['execution']['stop_on_first_rerun'] = True
        nproc = 1

    # ------------------------------------------------------------------------
    # Run with or without a plugin:
    # ------------------------------------------------------------------------
    if args.plugin:
        if args.plugin_args:
            Flow.run(plugin=args.plugin, plugin_args=eval(args.plugin_args))
        else:
            Flow.run(plugin=args.plugin)
    elif nproc > 1:
        Flow.run(plugin='MultiProc',
                 plugin_args={'n_procs': nproc})
    else:
        Flow.run()  # Use all processors: Flow.run(plugin='MultiProc')

    print('Done! ({0:0.2f} seconds)'.format(time() - time0))
